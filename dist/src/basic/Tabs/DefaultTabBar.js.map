{"version":3,"sources":["../../../../src/basic/Tabs/DefaultTabBar.js"],"names":["React","require","ReactNative","StyleSheet","View","Animated","Platform","ViewPropTypes","Button","DefaultTabBar","createClass","propTypes","goToPage","func","activeTab","number","tabs","array","backgroundColor","string","activeTextColor","inactiveTextColor","tabStyle","style","renderTab","underlineStyle","contextTypes","theme","object","getDefaultProps","topTabBarActiveTextColor","topTabBarTextColor","renderTabOption","name","page","isTabActive","onPressHandler","activeTabStyle","textStyle","activeTextStyle","tabHeaderStyle","headerContent","props","children","undefined","textColor","fontWeight","flex","random","render","variables","context","platformStyle","containerWidth","numberOfTabs","length","tabUnderlineStyle","position","width","height","topTabBarActiveBorderColor","bottom","left","scrollValue","interpolate","inputRange","outputRange","map","StyledTab","mapPropsToStyleNames"],"mappings":"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","file":"DefaultTabBar.js","sourcesContent":["const React = require(\"react\");\r\nimport PropTypes from 'prop-types'; // ES6\r\nconst ReactNative = require(\"react-native\");\r\nimport { connectStyle, StyleProvider } from \"native-base-shoutem-theme\";\r\nimport variable from \"./../../theme/variables/platform\";\r\nimport { TabHeading, Text, TabContainer } from \"./../../index\";\r\nimport _ from \"lodash\";\r\n\r\nconst { StyleSheet, View, Animated, Platform, ViewPropTypes } = ReactNative;\r\nconst Button = require(\"./Button\");\r\n\r\nconst DefaultTabBar = React.createClass({\r\n  propTypes: {\r\n    goToPage: PropTypes.func,\r\n    activeTab: PropTypes.number,\r\n    tabs: PropTypes.array,\r\n    backgroundColor: PropTypes.string,\r\n    activeTextColor: PropTypes.string,\r\n    inactiveTextColor: PropTypes.string,\r\n    tabStyle: ViewPropTypes.style,\r\n    renderTab: PropTypes.func,\r\n    underlineStyle: ViewPropTypes.style\r\n  },\r\n  contextTypes: {\r\n    theme: PropTypes.object\r\n  },\r\n\r\n  getDefaultProps() {\r\n    return {\r\n      activeTextColor: variable.topTabBarActiveTextColor,\r\n      inactiveTextColor: variable.topTabBarTextColor,\r\n      backgroundColor: null\r\n    };\r\n  },\r\n\r\n  renderTabOption(name, page) {},\r\n\r\n  renderTab(\r\n    name,\r\n    page,\r\n    isTabActive,\r\n    onPressHandler,\r\n    tabStyle,\r\n    activeTabStyle,\r\n    textStyle,\r\n    activeTextStyle,\r\n    tabHeaderStyle\r\n  ) {\r\n    const headerContent = typeof name !== \"string\"\r\n      ? name.props.children\r\n      : undefined;\r\n    const { activeTextColor, inactiveTextColor } = this.props;\r\n    const textColor = isTabActive ? activeTextColor : inactiveTextColor;\r\n    const fontWeight = isTabActive ? \"bold\" : \"normal\";\r\n    if (typeof name === \"string\") {\r\n      return (\r\n        <Button\r\n          style={{ flex: 1 }}\r\n          key={name}\r\n          onPress={() => onPressHandler(page)}\r\n        >\r\n          <TabHeading\r\n            style={isTabActive ? activeTabStyle : tabStyle}\r\n            active={isTabActive}\r\n          >\r\n            <Text style={isTabActive ? activeTextStyle : textStyle}>\r\n              {name}\r\n            </Text>\r\n          </TabHeading>\r\n        </Button>\r\n      );\r\n    } else {\r\n      return (\r\n        <Button\r\n          style={{ flex: 1 }}\r\n          key={_.random(1.2, 5.2)}\r\n          onPress={() => onPressHandler(page)}\r\n        >\r\n          <TabHeading style={tabHeaderStyle} active={isTabActive}>\r\n            {headerContent}\r\n          </TabHeading>\r\n        </Button>\r\n      );\r\n    }\r\n  },\r\n\r\n  render() {\r\n    const variables = this.context.theme\r\n      ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\r\n      : variable;\r\n    const platformStyle = variables.platformStyle;\r\n    const containerWidth = this.props.containerWidth;\r\n    const numberOfTabs = this.props.tabs.length;\r\n    const tabUnderlineStyle = {\r\n      position: \"absolute\",\r\n      width: containerWidth / numberOfTabs,\r\n      height: 4,\r\n      backgroundColor: variables.topTabBarActiveBorderColor,\r\n      bottom: 0\r\n    };\r\n\r\n    const left = this.props.scrollValue.interpolate({\r\n      inputRange: [0, 1],\r\n      outputRange: [0, containerWidth / numberOfTabs]\r\n    });\r\n    return (\r\n      <TabContainer>\r\n        {this.props.tabs.map((name, page) => {\r\n          const isTabActive = this.props.activeTab === page;\r\n          const renderTab = this.props.renderTab || this.renderTab;\r\n          return renderTab(\r\n            name,\r\n            page,\r\n            isTabActive,\r\n            this.props.goToPage,\r\n            this.props.tabStyle[page],\r\n            this.props.activeTabStyle[page],\r\n            this.props.textStyle[page],\r\n            this.props.activeTextStyle[page],\r\n            this.props.tabHeaderStyle[page]\r\n          );\r\n        })}\r\n        <Animated.View\r\n          style={[tabUnderlineStyle, { left }, this.props.underlineStyle]}\r\n        />\r\n      </TabContainer>\r\n    );\r\n  }\r\n});\r\n\r\n// module.exports = DefaultTabBar;\r\nconst StyledTab = connectStyle(\r\n  \"NativeBase.DefaultTabBar\",\r\n  {},\r\n  mapPropsToStyleNames\r\n)(DefaultTabBar);\r\nexport { StyledTab as DefaultTabBar };\r\n"]}