{"version":3,"sources":["../../../../src/basic/Tabs/DefaultTabBar.js"],"names":["ReactNative","require","StyleSheet","View","Animated","Platform","ViewPropTypes","Button","DefaultTabBar","contextTypes","theme","object","activeTextColor","topTabBarActiveTextColor","inactiveTextColor","topTabBarTextColor","backgroundColor","name","page","isTabActive","onPressHandler","tabStyle","activeTabStyle","textStyle","activeTextStyle","tabHeaderStyle","headerContent","props","children","undefined","textColor","fontWeight","flex","random","variables","context","platformStyle","containerWidth","numberOfTabs","tabs","length","tabUnderlineStyle","position","width","height","topTabBarActiveBorderColor","bottom","left","scrollValue","interpolate","inputRange","outputRange","map","activeTab","renderTab","goToPage","underlineStyle","propTypes","func","number","array","string","style","StyledTab","mapPropsToStyleNames"],"mappings":"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","file":"DefaultTabBar.js","sourcesContent":["import React, { Component } from \"react\"\r\nimport PropTypes from 'prop-types'\r\nconst ReactNative = require(\"react-native\");\r\nimport { connectStyle, StyleProvider } from \"native-base-shoutem-theme\";\r\nimport variable from \"./../../theme/variables/platform\";\r\nimport { TabHeading, Text, TabContainer } from \"./../../index\";\r\nimport _ from \"lodash\";\r\n\r\nconst { StyleSheet, View, Animated, Platform, ViewPropTypes } = ReactNative;\r\nconst Button = require(\"./Button\");\r\n\r\nclass DefaultTabBar extends Component {\r\n  contextTypes = {\r\n    theme: PropTypes.object\r\n  }\r\n\r\n  getDefaultProps() {\r\n    return {\r\n      activeTextColor: variable.topTabBarActiveTextColor,\r\n      inactiveTextColor: variable.topTabBarTextColor,\r\n      backgroundColor: null\r\n    };\r\n  }\r\n\r\n  renderTabOption(name, page) { }\r\n\r\n  renderTab(\r\n    name,\r\n    page,\r\n    isTabActive,\r\n    onPressHandler,\r\n    tabStyle,\r\n    activeTabStyle,\r\n    textStyle,\r\n    activeTextStyle,\r\n    tabHeaderStyle\r\n  ) {\r\n    const headerContent = typeof name !== \"string\"\r\n      ? name.props.children\r\n      : undefined;\r\n    const { activeTextColor, inactiveTextColor } = this.props;\r\n    const textColor = isTabActive ? activeTextColor : inactiveTextColor;\r\n    const fontWeight = isTabActive ? \"bold\" : \"normal\";\r\n    if (typeof name === \"string\") {\r\n      return (\r\n        <Button\r\n          style={{ flex: 1 }}\r\n          key={name}\r\n          onPress={() => onPressHandler(page)}\r\n        >\r\n          <TabHeading\r\n            style={isTabActive ? activeTabStyle : tabStyle}\r\n            active={isTabActive}\r\n          >\r\n            <Text style={isTabActive ? activeTextStyle : textStyle}>\r\n              {name}\r\n            </Text>\r\n          </TabHeading>\r\n        </Button>\r\n      );\r\n    } else {\r\n      return (\r\n        <Button\r\n          style={{ flex: 1 }}\r\n          key={_.random(1.2, 5.2)}\r\n          onPress={() => onPressHandler(page)}\r\n        >\r\n          <TabHeading style={tabHeaderStyle} active={isTabActive}>\r\n            {headerContent}\r\n          </TabHeading>\r\n        </Button>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const variables = this.context.theme\r\n      ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\r\n      : variable;\r\n    const platformStyle = variables.platformStyle;\r\n    const containerWidth = this.props.containerWidth;\r\n    const numberOfTabs = this.props.tabs.length;\r\n    const tabUnderlineStyle = {\r\n      position: \"absolute\",\r\n      width: containerWidth / numberOfTabs,\r\n      height: 4,\r\n      backgroundColor: variables.topTabBarActiveBorderColor,\r\n      bottom: 0\r\n    };\r\n\r\n    const left = this.props.scrollValue.interpolate({\r\n      inputRange: [0, 1],\r\n      outputRange: [0, containerWidth / numberOfTabs]\r\n    });\r\n    return (\r\n      <TabContainer>\r\n        {this.props.tabs.map((name, page) => {\r\n          const isTabActive = this.props.activeTab === page;\r\n          const renderTab = this.props.renderTab || this.renderTab;\r\n          return renderTab(\r\n            name,\r\n            page,\r\n            isTabActive,\r\n            this.props.goToPage,\r\n            this.props.tabStyle[page],\r\n            this.props.activeTabStyle[page],\r\n            this.props.textStyle[page],\r\n            this.props.activeTextStyle[page],\r\n            this.props.tabHeaderStyle[page]\r\n          );\r\n        })}\r\n        <Animated.View\r\n          style={[tabUnderlineStyle, { left }, this.props.underlineStyle]}\r\n        />\r\n      </TabContainer>\r\n    );\r\n  }\r\n}\r\n\r\nDefaultTabBar.propTypes = {\r\n  goToPage: PropTypes.func,\r\n  activeTab: PropTypes.number,\r\n  tabs: PropTypes.array,\r\n  backgroundColor: PropTypes.string,\r\n  activeTextColor: PropTypes.string,\r\n  inactiveTextColor: PropTypes.string,\r\n  tabStyle: ViewPropTypes.style,\r\n  renderTab: PropTypes.func,\r\n  underlineStyle: ViewPropTypes.style\r\n}\r\n\r\n// module.exports = DefaultTabBar;\r\nconst StyledTab = connectStyle(\r\n  \"NativeBase.DefaultTabBar\",\r\n  {},\r\n  mapPropsToStyleNames\r\n)(DefaultTabBar);\r\nexport { StyledTab as DefaultTabBar };\r\n"]}