{"version":3,"sources":["../../../src/basic/Picker.ios.js"],"names":["PickerNB","props","state","modalVisible","currentLabel","getLabel","dataSource","children","nextProps","nextLabel","currentDS","nextDS","setState","picker","pickerItem","visible","defaultProps","style","getInitialStyle","itemStyle","item","find","child","value","selectedValue","get","cloneElement","iosIcon","fontSize","lineHeight","color","onPress","_setModalVisible","text","placeholder","renderButton","selectedItem","getSelectedItem","textStyle","note","undefined","renderIcon","renderHeader","headerStyle","shadowOffset","shadowColor","shadowRadius","shadowOpacity","headerBackButtonStyle","headerBackButtonTextStyle","headerBackButtonText","headerTitleStyle","iosHeader","_root","c","supportedOrientations","onValueChange","current","label","itemTextStyle","Item","propTypes","func","StyledPickerNB"],"mappings":"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","file":"Picker.ios.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types'; // ES6\r\nimport { Picker, Modal, View, ListView, ViewPropTypes } from \"react-native\";\r\nimport _ from \"lodash\";\r\nimport { Text } from \"./Text\";\r\nimport { List } from \"./List\";\r\nimport { IconNB as Icon } from \"./IconNB\";\r\nimport { Radio } from \"./Radio\";\r\nimport { Container } from \"./Container\";\r\nimport { Content } from \"./Content\";\r\nimport { ListItem } from \"./ListItem\";\r\nimport { Button } from \"./Button\";\r\nimport { Header } from \"./Header\";\r\nimport { Title } from \"./Title\";\r\nimport { Left } from \"./Left\";\r\nimport { Right } from \"./Right\";\r\nimport { Body } from \"./Body\";\r\nimport { connectStyle } from \"native-base-shoutem-theme\";\r\nimport computeProps from \"../Utils/computeProps\";\r\n\r\nimport mapPropsToStyleNames from \"../Utils/mapPropsToStyleNames\";\r\n\r\nclass PickerNB extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modalVisible: false,\r\n      currentLabel: this.getLabel(props),\r\n      dataSource: props.children\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    const currentLabel = this.state.currentLabel;\r\n    const nextLabel = this.getLabel(nextProps);\r\n    const currentDS = this.state.dataSource;\r\n    const nextDS = nextProps.children;\r\n\r\n    if (currentLabel !== nextLabel) {\r\n      this.setState({\r\n        currentLabel: nextLabel\r\n      });\r\n    }\r\n    if (currentDS !== nextDS) {\r\n      this.setState({\r\n        dataSource: nextDS\r\n      });\r\n    }\r\n  }\r\n\r\n  getInitialStyle() {\r\n    return {\r\n      picker: {\r\n        // alignItems: 'flex-end'\r\n      },\r\n      pickerItem: {}\r\n    };\r\n  }\r\n  _setModalVisible(visible) {\r\n    this.setState({ modalVisible: visible });\r\n  }\r\n\r\n  prepareRootProps() {\r\n    const defaultProps = {\r\n      style: this.getInitialStyle().picker,\r\n      itemStyle: this.getInitialStyle().pickerItem\r\n    };\r\n\r\n    return computeProps(this.props, defaultProps);\r\n  }\r\n\r\n  getLabel(props) {\r\n    const item = _.find(\r\n      props.children,\r\n      child => child.props.value === props.selectedValue\r\n    );\r\n    return _.get(item, \"props.label\");\r\n  }\r\n\r\n  getSelectedItem() {\r\n    return _.find(\r\n      this.props.children,\r\n      child => child.props.value === this.props.selectedValue\r\n    );\r\n  }\r\n\r\n  renderIcon() {\r\n    return React.cloneElement(this.props.iosIcon, {\r\n      style: { fontSize: 22, lineHeight: 26, color: \"#7a7a7a\" }\r\n    });\r\n  }\r\n\r\n  renderButton() {\r\n    const onPress = () => {\r\n      this._setModalVisible(true);\r\n    };\r\n    const text = this.state.currentLabel\r\n      ? this.state.currentLabel\r\n      : this.props.placeholder;\r\n    if (this.props.renderButton) {\r\n      return this.props.renderButton({\r\n        onPress,\r\n        text,\r\n        picker: this,\r\n        selectedItem: this.getSelectedItem()\r\n      });\r\n    }\r\n    return (\r\n      <Button\r\n        style={this.props.style}\r\n        dark\r\n        picker\r\n        transparent\r\n        onPress={onPress}\r\n      >\r\n        {this.state.currentLabel\r\n          ? <Text style={this.props.textStyle} note={this.props.note}>\r\n            {this.state.currentLabel}\r\n          </Text>\r\n          : <Text\r\n            style={this.props.textStyle}\r\n            note={this.props.note === false ? false : true}\r\n          >\r\n            {this.props.placeholder}\r\n          </Text>}\r\n        {this.props.iosIcon === undefined ? null : this.renderIcon()}\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  renderHeader() {\r\n    return this.props.renderHeader\r\n      ? this.props.renderHeader(() => this._setModalVisible(false))\r\n      : <Header style={this.props.headerStyle}>\r\n        <Left>\r\n          <Button\r\n            style={{\r\n              shadowOffset: null,\r\n              shadowColor: null,\r\n              shadowRadius: null,\r\n              shadowOpacity: null,\r\n              ...this.props.headerBackButtonStyle\r\n            }}\r\n            transparent\r\n            onPress={() => {\r\n              this._setModalVisible(false);\r\n            }}\r\n          >\r\n            <Text style={this.props.headerBackButtonTextStyle}>\r\n              {this.props.headerBackButtonText || \"Back\"}\r\n            </Text>\r\n          </Button>\r\n        </Left>\r\n        <Body>\r\n          <Title style={this.props.headerTitleStyle}>\r\n            {this.props.iosHeader || \"Select One\"}\r\n          </Title>\r\n        </Body>\r\n        <Right />\r\n      </Header>;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View ref={c => (this._root = c)}>\r\n        {this.renderButton()}\r\n        <Modal\r\n          supportedOrientations={this.props.supportedOrientations || null}\r\n          animationType=\"slide\"\r\n          transparent={false}\r\n          visible={this.state.modalVisible}\r\n          onRequestClose={() => {\r\n            this._setModalVisible(false);\r\n          }}\r\n        >\r\n          <Container>\r\n            {this.renderHeader()}\r\n            <Content>\r\n              <List\r\n                dataArray={this.state.dataSource}\r\n                renderRow={child =>\r\n                  <ListItem\r\n                    selected={child.props.value === this.props.selectedValue}\r\n                    button\r\n                    style={this.props.itemStyle}\r\n                    onPress={() => {\r\n                      this._setModalVisible(false);\r\n                      this.props.onValueChange(child.props.value);\r\n                      this.setState({ current: child.props.label });\r\n                    }}\r\n                  >\r\n                    <Text style={this.props.itemTextStyle}>\r\n                      {child.props.label}\r\n                    </Text>\r\n                    <Right>\r\n                      {child.props.value === this.props.selectedValue\r\n                        ? <Radio selected />\r\n                        : <Radio selected={false} />}\r\n                    </Right>\r\n                  </ListItem>}\r\n              />\r\n            </Content>\r\n          </Container>\r\n        </Modal>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nPickerNB.Item = (props) => {\r\n  return <Picker.Item {...props() } />;\r\n}\r\n\r\nPickerNB.propTypes = {\r\n  ...ViewPropTypes,\r\n  renderButton: PropTypes.func\r\n};\r\n\r\nconst StyledPickerNB = connectStyle(\r\n  \"NativeBase.PickerNB\",\r\n  {},\r\n  mapPropsToStyleNames\r\n)(PickerNB);\r\n\r\nexport { StyledPickerNB as PickerNB };\r\n"]}