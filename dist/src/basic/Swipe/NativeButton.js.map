{"version":3,"sources":["../../../../src/basic/Swipe/NativeButton.js"],"names":["styles","create","button","flexDirection","alignSelf","justifyContent","textButton","fontSize","opacity","NativeButton","statics","isAndroid","OS","getDefaultProps","textStyle","disabledStyle","underlayColor","_renderText","props","children","render","disabled","buttonProps","accessibilityComponentType","accessibilityTraits","accessible","delayLongPress","delayPressIn","delayPressOut","hitSlop","onLayout","onPress","onPressIn","onPressOut","onLongPress","pressRetentionOffset","background","SelectableBackground","style","propTypes","node","isRequired","string","any"],"mappings":"+UAAA,4B;AACA,qC;;AAEA,yC;;;;;;;;;;AAUA,GAAMA,QAAS,wBAAWC,MAAX,CAAkB;AAC/BC,OAAQ;AACNC,cAAe,KADT;AAENC,UAAW,SAFL;AAGNC,eAAgB,QAHV,CADuB;;AAM/BC,WAAY;AACVC,SAAU,EADA;AAEVH,UAAW,QAFD,CANmB;;AAU/BI,QAAS;AACPA,QAAS,GADF,CAVsB,CAAlB,CAAf,C;;;;AAeMC,Y;AACJC,O,CAAU;AACRC,UAAW,sBAASC,EAAT,GAAgB,SADnB,C;;;AAIVC,e,CAAkB,UAAY;AAC5B,MAAO;AACLC,UAAW,IADN;AAELC,cAAe,IAFV;AAGLC,cAAe,IAHV,CAAP;;AAKD,C;;AAEDC,W,CAAc,UAAY;;AAExB,GAAI,MAAO,MAAKC,KAAL,CAAWC,QAAlB,GAA+B,QAAnC,CAA6C;AAC3C,MAAO,MAAKD,KAAL,CAAWC,QAAlB;AACD;;AAED;AACE,iDAAM,MAAO,CAACnB,OAAOM,UAAR,CAAoB,KAAKY,KAAL,CAAWJ,SAA/B,CAAb;AACG,KAAKI,KAAL,CAAWC,QADd,CADF;;;AAKD,C;;AAEDC,M,CAAS,UAAY;AACnB,GAAML,eAAgB,KAAKG,KAAL,CAAWG,QAAX;AAClB,KAAKH,KAAL,CAAWH,aAAX,EAA4Bf,OAAOQ,OADjB;AAElB,EAFJ;;;AAKA,GAAIc,aAAc;AAChBC,2BAA4B,KAAKL,KAAL,CAAWK,0BADvB;AAEhBC,oBAAqB,KAAKN,KAAL,CAAWM,mBAFhB;AAGhBC,WAAY,KAAKP,KAAL,CAAWO,UAHP;AAIhBC,eAAgB,KAAKR,KAAL,CAAWQ,cAJX;AAKhBC,aAAc,KAAKT,KAAL,CAAWS,YALT;AAMhBC,cAAe,KAAKV,KAAL,CAAWU,aANV;AAOhBP,SAAU,KAAKH,KAAL,CAAWG,QAPL;AAQhBQ,QAAS,KAAKX,KAAL,CAAWW,OARJ;AAShBC,SAAU,KAAKZ,KAAL,CAAWY,QATL;AAUhBC,QAAS,KAAKb,KAAL,CAAWa,OAVJ;AAWhBC,UAAW,KAAKd,KAAL,CAAWc,SAXN;AAYhBC,WAAY,KAAKf,KAAL,CAAWe,UAZP;AAahBC,YAAa,KAAKhB,KAAL,CAAWgB,WAbR;AAchBC,qBAAsB,KAAKjB,KAAL,CAAWiB,oBAdjB,CAAlB;;;;AAkBA,GAAI1B,aAAaE,SAAjB,CAA4B;AAC1BW,YAAc,SAAcA,WAAd,CAA2B;AACvCc;AACA,KAAKlB,KAAL,CAAWkB,UAAX;AACA,qCAAwBC,oBAAxB,EAHuC,CAA3B,CAAd;;;AAMA;AACE,+EAA6Bf,WAA7B;AACE,iDAAM,MAAO,CAACtB,OAAOE,MAAR,CAAgB,KAAKgB,KAAL,CAAWoB,KAA3B,CAAkCvB,aAAlC,CAAb;AACG,KAAKE,WAAL,EADH,CADF,CADF;;;;AAOD;;;AAGD;AACE;AACMK,WADN;AAEE,MAAO,CAACtB,OAAOE,MAAR,CAAgB,KAAKgB,KAAL,CAAWoB,KAA3B,CAAkCvB,aAAlC,CAFT;AAGE,cAAe,KAAKG,KAAL,CAAWF,aAH5B;;AAKG,KAAKC,WAAL,EALH,CADF;;;AASD,C;;;AAGHR,aAAa8B,SAAb;;AAEK,sCAAyBA,SAF9B;AAGEzB,UAAW,kBAAKyB,SAAL,CAAeD,KAH5B;AAIEvB,cAAe,kBAAKwB,SAAL,CAAeD,KAJhC;AAKEnB,SAAU,oBAAUqB,IAAV,CAAeC,UAL3B;AAMEzB,cAAe,oBAAU0B,MAN3B;AAOEN,WAAY,qCAAwBG,SAAxB;AACR,qCAAwBA,SAAxB,CAAkCH,UAD1B;AAER,oBAAUO,GAThB,G;;;AAYelC,Y","file":"NativeButton.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {\r\n  TouchableWithoutFeedback,\r\n  TouchableNativeFeedback,\r\n  TouchableHighlight,\r\n  Text,\r\n  StyleSheet,\r\n  Platform,\r\n  View\r\n} from \"react-native\";\r\n\r\nconst styles = StyleSheet.create({\r\n  button: {\r\n    flexDirection: \"row\",\r\n    alignSelf: \"stretch\",\r\n    justifyContent: \"center\"\r\n  },\r\n  textButton: {\r\n    fontSize: 14,\r\n    alignSelf: \"center\"\r\n  },\r\n  opacity: {\r\n    opacity: 0.8\r\n  }\r\n});\r\n\r\nclass NativeButton extends Component {\r\n  statics = {\r\n    isAndroid: Platform.OS === \"android\"\r\n  }\r\n\r\n  getDefaultProps = function () {\r\n    return {\r\n      textStyle: null,\r\n      disabledStyle: null,\r\n      underlayColor: null\r\n    };\r\n  }\r\n\r\n  _renderText = function () {\r\n    // If children is not a string don't wrapp it in a Text component\r\n    if (typeof this.props.children !== \"string\") {\r\n      return this.props.children;\r\n    }\r\n\r\n    return (\r\n      <Text style={[styles.textButton, this.props.textStyle]}>\r\n        {this.props.children}\r\n      </Text>\r\n    );\r\n  }\r\n\r\n  render = function () {\r\n    const disabledStyle = this.props.disabled\r\n      ? this.props.disabledStyle || styles.opacity\r\n      : {};\r\n\r\n    // Extract Button props\r\n    let buttonProps = {\r\n      accessibilityComponentType: this.props.accessibilityComponentType,\r\n      accessibilityTraits: this.props.accessibilityTraits,\r\n      accessible: this.props.accessible,\r\n      delayLongPress: this.props.delayLongPress,\r\n      delayPressIn: this.props.delayPressIn,\r\n      delayPressOut: this.props.delayPressOut,\r\n      disabled: this.props.disabled,\r\n      hitSlop: this.props.hitSlop,\r\n      onLayout: this.props.onLayout,\r\n      onPress: this.props.onPress,\r\n      onPressIn: this.props.onPressIn,\r\n      onPressOut: this.props.onPressOut,\r\n      onLongPress: this.props.onLongPress,\r\n      pressRetentionOffset: this.props.pressRetentionOffset\r\n    };\r\n\r\n    // Render Native Android Button\r\n    if (NativeButton.isAndroid) {\r\n      buttonProps = Object.assign(buttonProps, {\r\n        background:\r\n        this.props.background ||\r\n        TouchableNativeFeedback.SelectableBackground()\r\n      });\r\n\r\n      return (\r\n        <TouchableNativeFeedback {...buttonProps}>\r\n          <View style={[styles.button, this.props.style, disabledStyle]}>\r\n            {this._renderText()}\r\n          </View>\r\n        </TouchableNativeFeedback>\r\n      );\r\n    }\r\n\r\n    // Render default button\r\n    return (\r\n      <TouchableHighlight\r\n        {...buttonProps}\r\n        style={[styles.button, this.props.style, disabledStyle]}\r\n        underlayColor={this.props.underlayColor}\r\n      >\r\n        {this._renderText()}\r\n      </TouchableHighlight>\r\n    );\r\n  }\r\n}\r\n\r\nNativeButton.propTypes = {\r\n  // Extract parent props\r\n  ...TouchableWithoutFeedback.propTypes,\r\n  textStyle: Text.propTypes.style,\r\n  disabledStyle: Text.propTypes.style,\r\n  children: PropTypes.node.isRequired,\r\n  underlayColor: PropTypes.string,\r\n  background: TouchableNativeFeedback.propTypes\r\n    ? TouchableNativeFeedback.propTypes.background\r\n    : PropTypes.any\r\n}\r\n\r\nexport default NativeButton;\r\n"]}