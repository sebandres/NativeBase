{"version":3,"sources":["../../../../src/basic/Swipe/NativeButton.js"],"names":["styles","create","button","flexDirection","alignSelf","justifyContent","textButton","fontSize","opacity","NativeButton","createClass","propTypes","textStyle","style","disabledStyle","children","node","isRequired","underlayColor","string","background","any","statics","isAndroid","OS","getDefaultProps","_renderText","props","render","disabled","buttonProps","accessibilityComponentType","accessibilityTraits","accessible","delayLongPress","delayPressIn","delayPressOut","hitSlop","onLayout","onPress","onPressIn","onPressOut","onLongPress","pressRetentionOffset","SelectableBackground"],"mappings":"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","file":"NativeButton.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types'; // ES6\r\n\r\nimport {\r\n  TouchableWithoutFeedback,\r\n  TouchableNativeFeedback,\r\n  TouchableHighlight,\r\n  Text,\r\n  StyleSheet,\r\n  Platform,\r\n  View\r\n} from \"react-native\";\r\n\r\nconst styles = StyleSheet.create({\r\n  button: {\r\n    flexDirection: \"row\",\r\n    alignSelf: \"stretch\",\r\n    justifyContent: \"center\"\r\n  },\r\n  textButton: {\r\n    fontSize: 14,\r\n    alignSelf: \"center\"\r\n  },\r\n  opacity: {\r\n    opacity: 0.8\r\n  }\r\n});\r\n\r\nconst NativeButton = React.createClass({\r\n  propTypes: {\r\n    // Extract parent props\r\n    ...TouchableWithoutFeedback.propTypes,\r\n    textStyle: Text.propTypes.style,\r\n    disabledStyle: Text.propTypes.style,\r\n    children: PropTypes.node.isRequired,\r\n    underlayColor: PropTypes.string,\r\n    background: TouchableNativeFeedback.propTypes\r\n      ? TouchableNativeFeedback.propTypes.background\r\n      : PropTypes.any\r\n  },\r\n\r\n  statics: {\r\n    isAndroid: Platform.OS === \"android\"\r\n  },\r\n\r\n  getDefaultProps: function() {\r\n    return {\r\n      textStyle: null,\r\n      disabledStyle: null,\r\n      underlayColor: null\r\n    };\r\n  },\r\n\r\n  _renderText: function() {\r\n    // If children is not a string don't wrapp it in a Text component\r\n    if (typeof this.props.children !== \"string\") {\r\n      return this.props.children;\r\n    }\r\n\r\n    return (\r\n      <Text style={[styles.textButton, this.props.textStyle]}>\r\n        {this.props.children}\r\n      </Text>\r\n    );\r\n  },\r\n\r\n  render: function() {\r\n    const disabledStyle = this.props.disabled\r\n      ? this.props.disabledStyle || styles.opacity\r\n      : {};\r\n\r\n    // Extract Button props\r\n    let buttonProps = {\r\n      accessibilityComponentType: this.props.accessibilityComponentType,\r\n      accessibilityTraits: this.props.accessibilityTraits,\r\n      accessible: this.props.accessible,\r\n      delayLongPress: this.props.delayLongPress,\r\n      delayPressIn: this.props.delayPressIn,\r\n      delayPressOut: this.props.delayPressOut,\r\n      disabled: this.props.disabled,\r\n      hitSlop: this.props.hitSlop,\r\n      onLayout: this.props.onLayout,\r\n      onPress: this.props.onPress,\r\n      onPressIn: this.props.onPressIn,\r\n      onPressOut: this.props.onPressOut,\r\n      onLongPress: this.props.onLongPress,\r\n      pressRetentionOffset: this.props.pressRetentionOffset\r\n    };\r\n\r\n    // Render Native Android Button\r\n    if (NativeButton.isAndroid) {\r\n      buttonProps = Object.assign(buttonProps, {\r\n        background:\r\n          this.props.background ||\r\n            TouchableNativeFeedback.SelectableBackground()\r\n      });\r\n\r\n      return (\r\n        <TouchableNativeFeedback {...buttonProps}>\r\n          <View style={[styles.button, this.props.style, disabledStyle]}>\r\n            {this._renderText()}\r\n          </View>\r\n        </TouchableNativeFeedback>\r\n      );\r\n    }\r\n\r\n    // Render default button\r\n    return (\r\n      <TouchableHighlight\r\n        {...buttonProps}\r\n        style={[styles.button, this.props.style, disabledStyle]}\r\n        underlayColor={this.props.underlayColor}\r\n      >\r\n        {this._renderText()}\r\n      </TouchableHighlight>\r\n    );\r\n  }\r\n});\r\n\r\nexport default NativeButton;\r\n"]}