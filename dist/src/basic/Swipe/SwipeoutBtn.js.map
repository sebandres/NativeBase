{"version":3,"sources":["../../../../src/basic/Swipe/SwipeoutBtn.js"],"names":["SwipeoutBtn","btn","props","styleSwipeoutBtn","styles","swipeoutBtn","type","push","colorDelete","colorPrimary","colorSecondary","backgroundColor","height","width","styleSwipeoutBtnComponent","styleSwipeoutBtnText","swipeoutBtnText","color","onPress","swipeoutBtnTouchable","underlayColor","disabled","component","text","key","propTypes","style","object","StyledSwipeoutBtn"],"mappings":"02BAAA,4B;AACA,qC;AACA;;AAEA,4C;AACA;AACA,sE;;AAEMA,W;;;;;;;;;;;;;;;;AAgBK;AACP,GAAIC,KAAM,KAAKC,KAAf;;AAEA,GAAIC,kBAAmB,CAACC,OAAOC,WAAR,CAAvB;;;AAGA,GAAIJ,IAAIK,IAAJ,GAAa,QAAjB,CAA2BH,iBAAiBI,IAAjB,CAAsBH,OAAOI,WAA7B,EAA3B;AACK,GAAIP,IAAIK,IAAJ,GAAa,SAAjB,CAA4BH,iBAAiBI,IAAjB,CAAsBH,OAAOK,YAA7B,EAA5B;AACA,GAAIR,IAAIK,IAAJ,GAAa,WAAjB,CAA8BH,iBAAiBI,IAAjB,CAAsBH,OAAOM,cAA7B;;;AAGnC,GAAIT,IAAIU,eAAR,CAAyBR,iBAAiBI,IAAjB,CAAsB,CAAC,CAAEI,gBAAiBV,IAAIU,eAAvB,CAAD,CAAtB;;AAEzBR,iBAAiBI,IAAjB,CAAsB,CAAC;AACrBK,OAAQX,IAAIW,MADS;AAErBC,MAAOZ,IAAIY,KAFU,CAAD,CAAtB;;;AAKA,GAAIC,2BAA4B,EAAhC;;;AAGAA,0BAA0BP,IAA1B,CAA+B,CAAC;AAC9BK,OAAQX,IAAIW,MADkB;AAE9BC,MAAOZ,IAAIY,KAFmB,CAAD,CAA/B;;;AAKA,GAAIE,sBAAuB,CAACX,OAAOY,eAAR,CAA3B;;;AAGA,GAAIf,IAAIgB,KAAR,CAAeF,qBAAqBR,IAArB,CAA0B,CAAC,CAAEU,MAAOhB,IAAIgB,KAAb,CAAD,CAA1B;;;AAGf,GAAIhB,IAAIgB,KAAR,CAAeF,qBAAqBR,IAArB,CAA0B,CAAC,CAAEU,MAAOhB,IAAIgB,KAAb,CAAD,CAA1B;AACf;AACE;AACE,QAAS,KAAKf,KAAL,CAAWgB,OADtB;AAEE,MAAOd,OAAOe,oBAFhB;AAGE,cAAe,KAAKjB,KAAL,CAAWkB,aAH5B;AAIE,SAAU,KAAKlB,KAAL,CAAWmB,QAJvB;AAKE,MAAOlB,gBALT;AAME,UAAWY,oBANb;;AAQKd,IAAIqB,SAAJ;AACC,iDAAM,MAAOR,yBAAb,iDAAyCb,IAAIqB,SAA7C,CADD;;AAGCrB,IAAIsB,IAXV,CADF;;;;;AAiBD,C,0CAjEyB,CACxB,MAAO,CACLZ,gBAAiB,IADZ,CAELM,MAAO,IAFF,CAGLK,UAAW,IAHN,CAILF,cAAe,IAJV,CAKLR,OAAQ,CALH,CAMLY,IAAK,IANA,CAOLN,QAAS,IAPJ,CAQLG,SAAU,KARL,CASLE,KAAM,UATD,CAULjB,KAAM,EAVD,CAWLO,MAAO,CAXF,CAAP,CAaD,C;;;;AAuDHb,YAAYyB,SAAZ;AACK,kBAAKA,SADV;AAEEC,MAAO,oBAAUC,MAFnB;;;AAKA,GAAMC,mBAAoB,yCAAa,wBAAb,CAAuC,EAAvC,iCAAiE5B,WAAjE,CAA1B,C;;;AAGuBA,W,CAArB4B,iB","file":"SwipeoutBtn.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'; // ES6\r\nimport { Text, TouchableHighlight, View } from 'react-native';\r\n\r\nimport NativeButton from './NativeButton';\r\nimport { connectStyle } from 'native-base-shoutem-theme';\r\nimport mapPropsToStyleNames from '../../Utils/mapPropsToStyleNames';\r\n\r\nclass SwipeoutBtn extends Component {\r\n  static get defaultProps() {\r\n    return {\r\n      backgroundColor: null,\r\n      color: null,\r\n      component: null,\r\n      underlayColor: null,\r\n      height: 0,\r\n      key: null,\r\n      onPress: null,\r\n      disabled: false,\r\n      text: 'Click me',\r\n      type: '',\r\n      width: 0,\r\n    };\r\n  }\r\n  render() {\r\n    var btn = this.props;\r\n\r\n    var styleSwipeoutBtn = [styles.swipeoutBtn];\r\n\r\n    //  apply \"type\" styles (delete || primary || secondary)\r\n    if (btn.type === 'delete') styleSwipeoutBtn.push(styles.colorDelete);\r\n    else if (btn.type === 'primary') styleSwipeoutBtn.push(styles.colorPrimary);\r\n    else if (btn.type === 'secondary') styleSwipeoutBtn.push(styles.colorSecondary);\r\n\r\n    //  apply background color\r\n    if (btn.backgroundColor) styleSwipeoutBtn.push([{ backgroundColor: btn.backgroundColor }]);\r\n\r\n    styleSwipeoutBtn.push([{\r\n      height: btn.height,\r\n      width: btn.width,\r\n    }]);\r\n\r\n    var styleSwipeoutBtnComponent = [];\r\n\r\n    //  set button dimensions\r\n    styleSwipeoutBtnComponent.push([{\r\n      height: btn.height,\r\n      width: btn.width,\r\n    }]);\r\n\r\n    var styleSwipeoutBtnText = [styles.swipeoutBtnText];\r\n\r\n    //  apply text color\r\n    if (btn.color) styleSwipeoutBtnText.push([{ color: btn.color }]);\r\n\r\n    //  apply text color\r\n    if (btn.color) styleSwipeoutBtnText.push([{ color: btn.color }])\r\n    return (\r\n      <NativeButton\r\n        onPress={this.props.onPress}\r\n        style={styles.swipeoutBtnTouchable}\r\n        underlayColor={this.props.underlayColor}\r\n        disabled={this.props.disabled}\r\n        style={styleSwipeoutBtn}\r\n        textStyle={styleSwipeoutBtnText}>\r\n        {\r\n          (btn.component ?\r\n            <View style={styleSwipeoutBtnComponent}>{btn.component}</View>\r\n            :\r\n            btn.text\r\n          )\r\n        }\r\n      </NativeButton>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nSwipeoutBtn.propTypes = {\r\n  ...Text.propTypes,\r\n  style: PropTypes.object,\r\n};\r\n\r\nconst StyledSwipeoutBtn = connectStyle('NativeBase.SwipeoutBtn', {}, mapPropsToStyleNames)(SwipeoutBtn);\r\n\r\nexport {\r\n  StyledSwipeoutBtn as SwipeoutBtn,\r\n};\r\n"]}